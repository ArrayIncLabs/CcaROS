/* Auto-generated by genmsg_cpp for file /home/cr-lab-tu/pub_sub/pub_sub/msg/state.msg */
#ifndef PUB_SUB_MESSAGE_STATE_H
#define PUB_SUB_MESSAGE_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "pub_sub/String.h"

namespace pub_sub
{
template <class ContainerAllocator>
struct state_ {
  typedef state_<ContainerAllocator> Type;

  state_()
  : state(0)
  , obstacle_angle(0)
  , goal_x(0.0)
  , goal_y(0.0)
  , robo_x(0.0)
  , robo_y(0.0)
  , robo_nav_direction()
  {
  }

  state_(const ContainerAllocator& _alloc)
  : state(0)
  , obstacle_angle(0)
  , goal_x(0.0)
  , goal_y(0.0)
  , robo_x(0.0)
  , robo_y(0.0)
  , robo_nav_direction(_alloc)
  {
  }

  typedef int8_t _state_type;
  int8_t state;

  typedef int8_t _obstacle_angle_type;
  int8_t obstacle_angle;

  typedef double _goal_x_type;
  double goal_x;

  typedef double _goal_y_type;
  double goal_y;

  typedef double _robo_x_type;
  double robo_x;

  typedef double _robo_y_type;
  double robo_y;

  typedef  ::pub_sub::String_<ContainerAllocator>  _robo_nav_direction_type;
   ::pub_sub::String_<ContainerAllocator>  robo_nav_direction;


  typedef boost::shared_ptr< ::pub_sub::state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pub_sub::state_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct state
typedef  ::pub_sub::state_<std::allocator<void> > state;

typedef boost::shared_ptr< ::pub_sub::state> statePtr;
typedef boost::shared_ptr< ::pub_sub::state const> stateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pub_sub::state_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pub_sub::state_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pub_sub

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pub_sub::state_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pub_sub::state_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pub_sub::state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "350c8d2acef40a7456c9bbd39e40e10e";
  }

  static const char* value(const  ::pub_sub::state_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x350c8d2acef40a74ULL;
  static const uint64_t static_value2 = 0x56c9bbd39e40e10eULL;
};

template<class ContainerAllocator>
struct DataType< ::pub_sub::state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pub_sub/state";
  }

  static const char* value(const  ::pub_sub::state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pub_sub::state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A representation of state of robot in terms of its direction, relative position of obstacles(angle), and its state(safe of close)\n\
\n\
int8 state			#state of the robot (safe, close or unsafe)\n\
int8 obstacle_angle			#angle of obstacle in which it is located.\n\
#------------------------------------------------------------------------------\n\
float64 goal_x			#position of the goal.\n\
float64 goal_y\n\
\n\
#------------------------------------------------------------------------------\n\
float64 robo_x			#position of the robot.\n\
float64 robo_y\n\
\n\
String robo_nav_direction	#direction of the robot in which it is moving\n\
\n\
================================================================================\n\
MSG: pub_sub/String\n\
string data\n\
\n\
";
  }

  static const char* value(const  ::pub_sub::state_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pub_sub::state_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.obstacle_angle);
    stream.next(m.goal_x);
    stream.next(m.goal_y);
    stream.next(m.robo_x);
    stream.next(m.robo_y);
    stream.next(m.robo_nav_direction);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct state_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pub_sub::state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pub_sub::state_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    s << indent << "obstacle_angle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.obstacle_angle);
    s << indent << "goal_x: ";
    Printer<double>::stream(s, indent + "  ", v.goal_x);
    s << indent << "goal_y: ";
    Printer<double>::stream(s, indent + "  ", v.goal_y);
    s << indent << "robo_x: ";
    Printer<double>::stream(s, indent + "  ", v.robo_x);
    s << indent << "robo_y: ";
    Printer<double>::stream(s, indent + "  ", v.robo_y);
    s << indent << "robo_nav_direction: ";
s << std::endl;
    Printer< ::pub_sub::String_<ContainerAllocator> >::stream(s, indent + "  ", v.robo_nav_direction);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PUB_SUB_MESSAGE_STATE_H

