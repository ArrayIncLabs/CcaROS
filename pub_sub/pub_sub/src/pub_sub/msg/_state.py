"""autogenerated by genpy from pub_sub/state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pub_sub.msg

class state(genpy.Message):
  _md5sum = "350c8d2acef40a7456c9bbd39e40e10e"
  _type = "pub_sub/state"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A representation of state of robot in terms of its direction, relative position of obstacles(angle), and its state(safe of close)

int8 state			#state of the robot (safe, close or unsafe)
int8 obstacle_angle			#angle of obstacle in which it is located.
#------------------------------------------------------------------------------
float64 goal_x			#position of the goal.
float64 goal_y

#------------------------------------------------------------------------------
float64 robo_x			#position of the robot.
float64 robo_y

String robo_nav_direction	#direction of the robot in which it is moving

================================================================================
MSG: pub_sub/String
string data

"""
  __slots__ = ['state','obstacle_angle','goal_x','goal_y','robo_x','robo_y','robo_nav_direction']
  _slot_types = ['int8','int8','float64','float64','float64','float64','pub_sub/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,obstacle_angle,goal_x,goal_y,robo_x,robo_y,robo_nav_direction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.obstacle_angle is None:
        self.obstacle_angle = 0
      if self.goal_x is None:
        self.goal_x = 0.
      if self.goal_y is None:
        self.goal_y = 0.
      if self.robo_x is None:
        self.robo_x = 0.
      if self.robo_y is None:
        self.robo_y = 0.
      if self.robo_nav_direction is None:
        self.robo_nav_direction = pub_sub.msg.String()
    else:
      self.state = 0
      self.obstacle_angle = 0
      self.goal_x = 0.
      self.goal_y = 0.
      self.robo_x = 0.
      self.robo_y = 0.
      self.robo_nav_direction = pub_sub.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2b4d.pack(_x.state, _x.obstacle_angle, _x.goal_x, _x.goal_y, _x.robo_x, _x.robo_y))
      _x = self.robo_nav_direction.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.robo_nav_direction is None:
        self.robo_nav_direction = pub_sub.msg.String()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.state, _x.obstacle_angle, _x.goal_x, _x.goal_y, _x.robo_x, _x.robo_y,) = _struct_2b4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robo_nav_direction.data = str[start:end].decode('utf-8')
      else:
        self.robo_nav_direction.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2b4d.pack(_x.state, _x.obstacle_angle, _x.goal_x, _x.goal_y, _x.robo_x, _x.robo_y))
      _x = self.robo_nav_direction.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.robo_nav_direction is None:
        self.robo_nav_direction = pub_sub.msg.String()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.state, _x.obstacle_angle, _x.goal_x, _x.goal_y, _x.robo_x, _x.robo_y,) = _struct_2b4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robo_nav_direction.data = str[start:end].decode('utf-8')
      else:
        self.robo_nav_direction.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2b4d = struct.Struct("<2b4d")
