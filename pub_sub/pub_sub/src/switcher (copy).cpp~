#include "ros/ros.h"
#include "sensor_msgs/LaserScan.h"
#include "std_msgs/String.h"
#include "geometry_msgs/Twist.h"

ros::Publisher vel_pub;
ros::Subscriber tele_cmd_vel_sub
ros::NodeHandle vel_sub;
void negotiatorCallback(const geometry_msgs::Twist::ConstPtr& msg)
{
	ROS_INFO("==SAFE STATE");
	vel_pub.publish(msg);
}


void switcherCallback(const std_msgs::Int8::ConstPtr& msg)
{
	if(msg->data.c_str()==(char*)"NA"){
		ROS_INFO("UNSAFE STATE");
	}
	else{
		tele_cmd_vel_sub = vel_sub.subscribe<geometry_msgs::Twist>("tele_cmd_vel", 1000, negotiatorCallback);
		ros::spin();
	}
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "switcher");
    ros::NodeHandle p;
    vel_pub = p.advertise<geometry_msgs::Twist>("cmd_vel",1000);
    ros::NodeHandle n;
    ros::Subscriber sub = n.subscribe<std_msgs::String>("robotState", 1000, switcherCallback);
    ros::spin();
    return 0;
}

